import streamlit as st
import joblib
import os
import numpy as np
from datetime import datetime

from src.notificacoes.email import enviar_email


# --- 1. CARREGAR O SEU MODELO ---
# Esta fun√ß√£o carrega seu modelo salvo e o guarda em cache para n√£o recarregar a cada intera√ß√£o.

@st.fragment
def enviar_alerta_manutencao(lux, temperatura, vibracao):
    if st.button("Enviar Alerta de Manuten√ß√£o"):
        hoje = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        enviar_email(
            f"Manuten√ß√£o Necess√°ria - {hoje}",
            "Prezado(a),\n\nO classificador de equipamentos identificou que uma manuten√ß√£o √© necess√°ria com base nas caracter√≠sticas fornecidas:\n\n"
            f"- Lux: {lux:.2f}\n"
            f"- Temperatura: {temperatura:.2f}\n"
            f"- Vibra√ß√£o: {vibracao:.2f}\n\n"
            "Por favor, agende a manuten√ß√£o o mais breve poss√≠vel.\n\nAtenciosamente,\nSistema de Monitoramento"
        )
        st.success("Alerta de manuten√ß√£o enviado com sucesso!")

@st.fragment
def carregar_modelo_e_realizar_previsao(lux:float, temp:float, vibracao:float):
    def carregar_modelo():
        pasta_resultados = os.path.join(os.path.dirname(__file__), "..", "..", "machine_learning", "modelos_salvos")

        # Lista apenas arquivos .pkl
        modelos_pkl = [f for f in os.listdir(pasta_resultados) if f.endswith('.joblib')]

        modelo_str = st.selectbox("Selecione o modelo de classifica√ß√£o:", modelos_pkl)

        try:
            modelo = joblib.load(os.path.join(pasta_resultados, modelo_str))
            return modelo
        except FileNotFoundError:
            st.error(f"Arquivo do modelo {modelo_str} n√£o encontrado. Verifique se o arquivo est√° na pasta correta.")
            return None

        # ...existing code...

        # Carrega o modelo ao iniciar a p√°gina

    modelo = carregar_modelo()

    # --- 3. L√ìGICA DE PREVIS√ÉO ---
    # O c√≥digo abaixo s√≥ roda se o modelo foi carregado com sucesso
    if modelo:
        # Bot√£o para executar a previs√£o, agora na p√°gina principal
        if st.button("Fazer Previs√£o"):
            # Junta todos os inputs de texto em uma lista
            features = [lux, temp, vibracao]

            # Converte a lista para o formato que o modelo espera (array 2D)
            dados_para_prever = np.array(features).reshape(1, -1)

            # Faz a previs√£o usando o modelo carregado
            resultado_numerico = modelo.predict(dados_para_prever)[0]

            # retorna se √© necess√°rio fazer manuten√ß√£o ou n√£o

            if int(resultado_numerico) == 1:
                st.success("Manuten√ß√£o Necess√°ria")
                enviar_alerta_manutencao(
                    lux,
                    temp,
                    vibracao
                )

            else:
                st.success("Sem Manuten√ß√£o Necess√°ria")


def previsao_manual():


    # --- 2. INTERFACE VISUAL DA P√ÅGINA ---
    st.title("Classificador de Equipamentos")

    st.header("Insira as caracter√≠sticas de equipamentos:")

    Lux_str = st.number_input("Lux", value=15.0, step=1.0)
    Temperatura_str = st.number_input("Temperatura", value=14.0, step=1.0)
    vibracao_str = st.number_input("Vibra√ß√£o", value=0.0, step=1.0)

    carregar_modelo_e_realizar_previsao(
        Lux_str,
        Temperatura_str,
        vibracao_str
    )





previsao_manual_page = st.Page(previsao_manual, title="Classificador Manual", icon="ü§ñ")
